(define-fuzzy-logic zadeh)

#############################################################################################
##    Main Class Hierarchy
##
## add a new object type here if you wish,
## this imply also to add sub SpatialObject relations later
#############################################################################################

(define-primitive-concept Object *top*)
(define-primitive-concept Scene  *top*)
(disjoint Object Scene)
(disjoint SpatialObject Scene)

(implies Book  Object)
(implies Mouse Object)
(implies Cup   Object)


#############################################################################################
##    Spatial Relations (ζ)
##
## add here a new relation if you wish
## this implies to adjust the below Δ specifications
#############################################################################################

(range  isRightOf Object)
(domain isRightOf SpatialObject)

(range  isLeftOf  Object)
(domain isLeftOf  SpatialObject)

(range  isFrontOf  Object)
(domain isFrontOf  SpatialObject)

(range  isBehindOf Object)
(domain isBehindOf SpatialObject)

#(inverse isRightOf isLeftOf)
#(inverse isLeftOf  isRightOf)
#(inverse isFrontOf isBehindOf)
#(inverse isBehindOf isFrontOf)

(transitive isRightOf)
(transitive isLeftOf)
(transitive isBehindOf)
(transitive isFrontOf)


#############################################################################################
##    Scene Classes (Δ)
##
##    Scene Properties (δ) are automatically derived from those
##    ( e.g.: δ = "hasΔ" where Δ ⊂ SpatialObject )
##
## Scene Properties cardinality is based on SIGMA COUNT, defined as:
##           Σ(δ(Δ)) = sum_(η,δ){ ⊕{ ⊗{ Δ.η, δ.η}}}
##
##    EXAMPLE of cardinality for a specific δ:
## δ(Δ) = hasBookLeft
##            = max{ min{Book(α), α.isLeftOf(X1)}, ..., min{Book(α), α.isLeftOf(Xn)}}
##              + ... +
##              max{ min{Book(ω), ω.isLeftOf(X1)}, ..., min{Book(ω), ω.isLeftOf(Xm)}}
##  where: ⊗{ Δ.η, δ.η} = min{Book(η), η.isLeftOf(Xi)}
##  is the minimum classification of  'BookLeft' (⊂ SpatialObject).
##
## SpatialObject is a collection of all Δ,
## those are for each objects for each relations.
## If you add a new relation here (e.g.: Right) it will
## be automatically considered in the recognition.
## This imply to add a new property later.
##
## ATTENTION !!!!!!!!!!!
## Δ is parsed by CamelCase where the first part is the
## type class (⊂ Object), while the second is a name
## contained in the related spatial relation (ζ).
#############################################################################################

(define-concept BookRight  (and Book (some isRightOf  SpatialObject)))
(define-concept BookLeft   (and Book (some isLeftOf   SpatialObject)))
(define-concept BookFront  (and Book (some isFrontOf  SpatialObject)))
(define-concept BookBehind (and Book (some isBehindOf SpatialObject)))

(define-concept MouseRight  (and Mouse (some isRightOf  SpatialObject)))
(define-concept MouseLeft   (and Mouse (some isLeftOf   SpatialObject)))
(define-concept MouseFront  (and Mouse (some isFrontOf  SpatialObject)))
(define-concept MouseBehind (and Mouse (some isBehindOf SpatialObject)))

(define-concept CupRight  (and Cup (some isRightOf  SpatialObject)))
(define-concept CupLeft   (and Cup (some isLeftOf   SpatialObject)))
(define-concept CupFront  (and Cup (some isFrontOf  SpatialObject)))
(define-concept CupBehind (and Cup (some isBehindOf SpatialObject)))

#############################################################################################
##    Learning
##
## During scene learning a new file is create (or overwritten) in order to overcome
## to reasoning manipulation that effects the behaviour for further learning steps.
##
## Also, when the system learns, external annotation are added such as:
##           '#!# SceneName <- 3'
## to indicate, for each scene (by name), the number of objects contained in it.
##
## Finally, the learning procedure need the creation of right shoulder sets
## to classify the Σ value. Those have the name:
##           'atLeastφ'
## where φ is a double number (e.g.: 3.8) that indicates the point in which the
## shoulder reach the maximum value (i.e.: 1). On the other hand, the point in
## which it starts to become grater than 0 is set during learning as a percentage
## of the value of φ.
#############################################################################################
