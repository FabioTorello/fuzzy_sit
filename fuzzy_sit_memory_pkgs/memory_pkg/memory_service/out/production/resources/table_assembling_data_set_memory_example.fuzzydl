(define-fuzzy-logic zadeh)

#############################################################################################
##    Main Class Hierarchy
##
## add a new object type here if you wish,
## this imply also to add sub SpatialObject relations later
#############################################################################################

(define-primitive-concept Object *top*)
(define-primitive-concept SpatialObject Object)
(define-primitive-concept Scene  *top*)
(disjoint Object Scene)
(disjoint SpatialObject Scene)

(implies Pin_1 Object)
(implies Pin_2 Object)
(implies Pin_3 Object)
(implies Pin_4 Object)
(implies Pin_5 Object)
(implies Pin_6 Object)
(implies Pin_7 Object)
(implies Pin_8 Object)
(implies Pin_9 Object)
(implies Pin_10 Object)
(implies Pin_11 Object)
(implies Pin_12 Object)
(implies Table Object)
(implies BedLeg Object)
(implies ChairLeg Object)
(implies RoofLeg Object)
(implies NotLeg Object)


#############################################################################################
##    Spatial Relations (ζ)
##
## add here a new relation if you wish
## this implies to adjust the below Δ specifications
#############################################################################################

(range  isConnectedTo SpatialObject) # Object
(domain isConnectedTo SpatialObject)

(inverse isConnectedTo isConnectedTo)


#############################################################################################
##    Scene Classes (Δ)
##
##    Scene Properties (δ) are automatically derived from those
##    ( e.g.: δ = "hasΔ" where Δ ⊂ SpatialObject )
##
## Scene Properties cardinality is based on SIGMA COUNT, defined as:
##           Σ(δ(Δ)) = sum_(η,δ){ ⊕{ ⊗{ Δ.η, δ.η}}}
##
##    EXAMPLE of cardinality for a specific δ:
## δ(Δ) = hasBookLeft
##            = max{ min{Book(α), α.isLeftOf(X1)}, ..., min{Book(α), α.isLeftOf(Xn)}}
##              + ... +
##              max{ min{Book(ω), ω.isLeftOf(X1)}, ..., min{Book(ω), ω.isLeftOf(Xm)}}
##  where: ⊗{ Δ.η, δ.η} = min{Book(η), η.isLeftOf(Xi)}
##  is the minimum classification of  'BookLeft' (⊂ SpatialObject).
##
## SpatialObject is a collection of all Δ,
## those are for each objects for each relations.
## If you add a new relation here (e.g.: Right) it will
## be automatically considered in the recognition.
## This imply to add a new property later.
##
## ATTENTION !!!!!!!!!!!
## Δ is parsed by CamelCase where the first part is the
## type class (⊂ Object), while the second is a name
## contained in the related spatial relation (ζ).
#############################################################################################


(define-concept Pin_1Connected         (and Pin_1         (some isConnectedTo  SpatialObject)))
(define-concept Pin_2Connected         (and Pin_2         (some isConnectedTo  SpatialObject)))
(define-concept Pin_3Connected         (and Pin_3         (some isConnectedTo  SpatialObject)))
(define-concept Pin_4Connected         (and Pin_4         (some isConnectedTo  SpatialObject)))
(define-concept Pin_5Connected         (and Pin_5         (some isConnectedTo  SpatialObject)))
(define-concept Pin_6Connected         (and Pin_6         (some isConnectedTo  SpatialObject)))
(define-concept Pin_7Connected         (and Pin_7         (some isConnectedTo  SpatialObject)))
(define-concept Pin_8Connected         (and Pin_8         (some isConnectedTo  SpatialObject)))
(define-concept Pin_9Connected         (and Pin_9         (some isConnectedTo  SpatialObject)))
(define-concept Pin_10Connected        (and Pin_10         (some isConnectedTo  SpatialObject)))
(define-concept Pin_11Connected        (and Pin_11         (some isConnectedTo  SpatialObject)))
(define-concept Pin_12Connected        (and Pin_12         (some isConnectedTo  SpatialObject)))
(define-concept TableConnected         (and Table       (some isConnectedTo  SpatialObject)))
(define-concept BedLegConnected        (and BedLeg      (some isConnectedTo  SpatialObject)))
(define-concept ChairLegConnected      (and ChairLeg    (some isConnectedTo  SpatialObject)))
(define-concept RoofLegConnected       (and RoofLeg     (some isConnectedTo  SpatialObject)))
(define-concept NotLegConnected        (and NotLeg      (some isConnectedTo  SpatialObject)))


#############################################################################################
##    Learning
##
## During scene learning a new file is create (or overwritten) in order to overcome
## to reasoning manipulation that effects the behaviour for further learning steps.
##
## Also, when the system learns, external annotation are added such as:
##           '#!# SceneName <- 3'
## to indicate, for each scene (by name), the number of objects contained in it.
##
## Finally, the learning procedure need the creation of right shoulder sets
## to classify the Σ value. Those have the name:
##           'atLeastφ'
## where φ is a double number (e.g.: 3.8) that indicates the point in which the
## shoulder reach the maximum value (i.e.: 1). On the other hand, the point in
## which it starts to become grater than 0 is set during learning as a percentage
## of the value of φ.
#############################################################################################
