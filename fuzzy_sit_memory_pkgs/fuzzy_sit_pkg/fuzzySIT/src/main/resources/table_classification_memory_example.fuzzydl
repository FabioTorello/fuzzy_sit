(define-fuzzy-logic zadeh)

#############################################################################################
##    Main Class Hierarchy
##
## add a new object type here if you wish,
## this imply also to add sub SpatialObject relations later
#############################################################################################

(define-primitive-concept Object *top*)
(define-primitive-concept SpatialObject Object)
(define-primitive-concept Scene  *top*)
(disjoint Object Scene)
(disjoint SpatialObject Scene)

(implies Plate Object)
(implies Fork Object)
(implies Knife Object)
(implies Glass Object)
(implies R1 Object)
(implies R2 Object)
(implies R3 Object)
(implies R4 Object)
(implies RC Object)


#############################################################################################
##    Spatial Relations (ζ)
##
## add here a new relation if you wish
## this implies to adjust the below Δ specifications
#############################################################################################

(range  isNearTo SpatialObject) # Object
(domain isNearTo SpatialObject)
(range  isInRegion SpatialObject) # Object
(domain isInRegion SpatialObject)

(inverse isNearTo isNearTo)
(inverse isInRegion isInRegion)


#############################################################################################
##    Scene Classes (Δ)
##
##    Scene Properties (δ) are automatically derived from those
##    ( e.g.: δ = "hasΔ" where Δ ⊂ SpatialObject )
##
## Scene Properties cardinality is based on SIGMA COUNT, defined as:
##           Σ(δ(Δ)) = sum_(η,δ){ ⊕{ ⊗{ Δ.η, δ.η}}}
##
##    EXAMPLE of cardinality for a specific δ:
## δ(Δ) = hasBookLeft
##            = max{ min{Book(α), α.isLeftOf(X1)}, ..., min{Book(α), α.isLeftOf(Xn)}}
##              + ... +
##              max{ min{Book(ω), ω.isLeftOf(X1)}, ..., min{Book(ω), ω.isLeftOf(Xm)}}
##  where: ⊗{ Δ.η, δ.η} = min{Book(η), η.isLeftOf(Xi)}
##  is the minimum classification of  'BookLeft' (⊂ SpatialObject).
##
## SpatialObject is a collection of all Δ,
## those are for each objects for each relations.
## If you add a new relation here (e.g.: Right) it will
## be automatically considered in the recognition.
## This imply to add a new property later.
##
## ATTENTION !!!!!!!!!!!
## Δ is parsed by CamelCase where the first part is the
## type class (⊂ Object), while the second is a name
## contained in the related spatial relation (ζ).
#############################################################################################


(define-concept PlateNearTo     (and Plate    (some isNearTo  SpatialObject)))
(define-concept ForkNearTo      (and Fork     (some isNearTo  SpatialObject)))
(define-concept KnifeNearTo     (and Knife    (some isNearTo  SpatialObject)))
(define-concept GlassNearTo     (and Glass    (some isNearTo  SpatialObject)))
(define-concept R1NearTo        (and R1       (some isNearTo  SpatialObject)))
(define-concept R2NearTo        (and R2       (some isNearTo  SpatialObject)))
(define-concept R3NearTo        (and R3       (some isNearTo  SpatialObject)))
(define-concept R4NearTo        (and R4       (some isNearTo  SpatialObject)))
(define-concept RCNearTo        (and RC       (some isNearTo  SpatialObject)))
(define-concept PlateInRegion   (and Plate    (some isInRegion SpatialObject)))
(define-concept ForkInRegion    (and Fork     (some isInRegion SpatialObject)))
(define-concept KnifeInRegion   (and Knife    (some isInRegion SpatialObject)))
(define-concept GlassInRegion   (and Glass    (some isInRegion SpatialObject)))
(define-concept R1InRegion      (and R1       (some isInRegion  SpatialObject)))
(define-concept R2InRegion      (and R2       (some isInRegion  SpatialObject)))
(define-concept R3InRegion      (and R3       (some isInRegion  SpatialObject)))
(define-concept R4InRegion      (and R4       (some isInRegion  SpatialObject)))
(define-concept RCInRegion      (and RC       (some isInRegion  SpatialObject)))


#############################################################################################
##    Learning
##
## During scene learning a new file is create (or overwritten) in order to overcome
## to reasoning manipulation that effects the behaviour for further learning steps.
##
## Also, when the system learns, external annotation are added such as:
##           '#!# SceneName <- 3'
## to indicate, for each scene (by name), the number of objects contained in it.
##
## Finally, the learning procedure need the creation of right shoulder sets
## to classify the Σ value. Those have the name:
##           'atLeastφ'
## where φ is a double number (e.g.: 3.8) that indicates the point in which the
## shoulder reach the maximum value (i.e.: 1). On the other hand, the point in
## which it starts to become grater than 0 is set during learning as a percentage
## of the value of φ.
#############################################################################################